@model mboard.Models.Board

@{
    ViewBag.Title = "Edit";
}




@using (Html.BeginForm("Edit", "Test", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h2>Edycja</h2>
    <h4>Tablicy</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    
    @Html.HiddenFor(model => model.BoardModel)

    <div class="form-group">
        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.VisibleForFriends, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.VisibleForFriends)
                @Html.ValidationMessageFor(model => model.VisibleForFriends, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div id="myDiagramDiv" style="background-color:#f2f2f2; height: 500px"></div>

</div>
    <hr />
    <div id="diagram-buttons">
        <input type="submit" value="Zapisz" id="SaveButton" class="btn btn-success" />
         <button class="btn btn-danger" type="button" data-toggle="modal" data-target="#myModalDelete">
            Usuń
        </button>
        @Html.HiddenFor(model => model.DiagramData, new { htmlAttributes = new { @class = "form-control", @name = "mySavedModel2"} })

        <textarea id="mySavedModel" name="mySavedModel" class="form-control" style="display:none;">



                        @if (Model.DiagramData != null)
                        {

                            @Html.Value(Model.DiagramData);

                        }
                        else
                        {

                            //{
                            //"nodeDataArray": [
                            //{ "id": 0, "loc": "120 120", "text": "Initial", "comments": "test comment"},
                            //{ "id": 1, "loc": "330 120", "text": "First down" },
                            //{ "id": 2, "loc": "226 376", "text": "First up" },
                            //{ "id": 3, "loc": "60 276", "text": "Second down" },
                            //{ "id": 4, "loc": "226 226", "text": "Wait" }
                            //],
                            //"linkDataArray": [
                            //{ "from": 0, "to": 0, "text": "up or timer", "curviness": -20 },
                            //{ "from": 0, "to": 1, "text": "down", "curviness": 20 },
                            //{ "from": 1, "to": 0, "text": "up (moved)\nPOST", "curviness": 20 },
                            //{ "from": 1, "to": 1, "text": "down", "curviness": -20 },
                            //{ "from": 1, "to": 2, "text": "up (no move)" },
                            //{ "from": 1, "to": 4, "text": "timer" },
                            //{ "from": 2, "to": 0, "text": "timer\nPOST" },
                            //{ "from": 2, "to": 3, "text": "down" },
                            //{ "from": 3, "to": 0, "text": "up\nPOST\n(dblclick\nif no move)" },
                            //{ "from": 3, "to": 3, "text": "down or timer", "curviness": 20 },
                            //{ "from": 4, "to": 0, "text": "up\nPOST" },
                            //{ "from": 4, "to": 4, "text": "down" }
                            //]


                            //}
                            Html.Value("kliknij dwukrotnie aby dodac element..");


                        }





                        @*{
                        'nodeDataArray': [
                        { 'id': 0, 'loc': '120 120', 'text': 'Initial', 'comments': 'test comment'},
                        { 'id': 1, 'loc': '330 120', 'text': 'First down' },
                        { 'id': 2, 'loc': '226 376', 'text': 'First up' },
                        { 'id': 3, 'loc': '60 276', 'text': 'Second down' },
                        { 'id': 4, 'loc': '226 226', 'text': 'Wait' }
                        ],
                        'linkDataArray': [
                        { 'from': 0, 'to': 0, 'text': 'up or timer', 'curviness': -20 },
                        { 'from': 0, 'to': 1, 'text': 'down', 'curviness': 20 },
                        { 'from': 1, 'to': 0, 'text': 'up (moved)\nPOST', 'curviness': 20 },
                        { 'from': 1, 'to': 1, 'text': 'down', 'curviness': -20 },
                        { 'from': 1, 'to': 2, 'text': 'up (no move)' },
                        { 'from': 1, 'to': 4, 'text': 'timer' },
                        { 'from': 2, 'to': 0, 'text': 'timer\nPOST' },
                        { 'from': 2, 'to': 3, 'text': 'down' },
                        { 'from': 3, 'to': 0, 'text': 'up\nPOST\n(dblclick\nif no move)' },
                        { 'from': 3, 'to': 3, 'text': 'down or timer', 'curviness': 20 },
                        { 'from': 4, 'to': 0, 'text': 'up\nPOST' },
                        { 'from': 4, 'to': 4, 'text': 'down' }
                        ]


                        }*@


                    </textarea>

    </div> <!--end of diagram buttons-->

}
<hr />
@{Html.RenderAction("IndexBoard", "Tag", new { boardId = Model.Id });}

<button class="btn btn-success" type="button" data-toggle="modal" data-target="#myModal1">
    +
</button>
<hr />
<div>
    @Html.ActionLink("Lista Tablic", "Index", null, new { @class = "btn btn-primary" })
</div>

<div class="modal fade" id="myModalDelete" tabindex="-1" role="dialog" aria-labelledby="myModalDelete">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalDelete">Usuń Tablicę</h4>
            </div>
            <div class="modal-body">
                @{Html.RenderAction("Delete", "Test", new { id = Model.Id });}
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="myModal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel1">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel1">Dodaj Tag</h4>
            </div>
            <div class="modal-body">
                @{Html.RenderAction("Create", "Tag", new { TableId = Model.Id });}
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*@Scripts.Render("~/bundles/gojs")*@

}

<script src="~/Scripts/go-debug.js"></script>

<script>

    function init() {


        var diagModel = document.getElementById("BoardModel").value;


        //jezeli laduj js zgodnie z modelem diagramu okreslonym w bazie
        if (diagModel != null) {
            var $ = go.GraphObject.make;
            //model grafowy
            if (diagModel == 2) {
                console.log('displ graph');
        //console.log('display graph');

        myDiagram = $(go.Diagram, "myDiagramDiv",
            {
                initialContentAlignment: go.Spot.Center,
                "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
                "clickCreatingTool.archetypeNodeData": { text: "new node" },
                "undoManager.isEnabled": true
            }
        );

        myDiagram.addDiagramListener("Modified", function (e) {
            var btn = document.getElementById("SaveButton");
            if (btn) btn.disabled = !myDiagram.isModified;
            var idx = document.title.indexOf("*");
            if (myDiagram.isModified) {
                if (idx < 0) document.title += "*";
            } else {
                if (idx >= 0) document.title = document.title.substr(0, idx);
            }
        });

        //define node template
        myDiagram.nodeTemplate =
            $(go.Node, "Auto",

                {
                    mouseLeave: function (e, node) {

                        //console.log('mousedrop');
                        //console.log(node);
                        saveDiagramState();
                    }


                },
                new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),

                $(go.Shape, "RoundedRectangle",
                {
                    name: "shape",
                    parameter1: 5,//corner radius
                    fill: $(go.Brush, "Linear", { 0: "rgb(222, 222, 255)", 1: "rgb(233, 233, 200)" }),
                    stroke: null,
                    portId: "", //node port not a whole node
                    fromLinkable: true, fromLinkableSelfNode: true, fromLinkableDuplicates: true,
                    toLinkable: true, toLinkableSelfNode: true, toLinkableDuplicates: true,
                    cursor: "pointer"

                }),
                $(go.Panel, "Horizontal",
                    $(go.Picture,
                        {
                            name: "Picture",
                            desiredSize: new go.Size(39, 50),
                            margin: new go.Margin(6, 8, 6, 10),
                        },
                        new go.Binding("source")
                    ),
                    $(go.Panel, "Table",
                        {
                            maxSize: new go.Size(150, 999),
                            margin: new go.Margin(6, 10, 0, 3),
                            defaultAlignment: go.Spot.Left
                        },
                        $(go.RowColumnDefinition, { column: 2, width: 4 }),
                        $(go.TextBlock,
                            {
                                row: 0, column: 0, columnSpan: 5,
                                font: "bold 12pt Segoe UI,sans-serif",
                                editable: true, isMultiline: false,
                                minSize: new go.Size(10, 16)
                            },
                            new go.Binding("text").makeTwoWay()
                        ),
                        $(go.TextBlock,
                            {
                                row: 1, column: 0, columnSpan: 5,
                                font: "italic 9pt sans-serif",
                                wrap: go.TextBlock.WrapFit,
                                editable: true,  // by default newlines are allowed
                                minSize: new go.Size(10, 14)
                            },
                            new go.Binding("text", "comments").makeTwoWay())
                    )

                )

              );


        myDiagram.nodeTemplate.selectionAdornmentTemplate =
            $(go.Adornment, "Spot",
                $(go.Panel, "Auto",

                        $(go.Shape, { fill: null, stroke: "gold", strokeWidth: 2 }),
                        $(go.Placeholder)


                ),
                $("Button",
                    {
                        alignment: go.Spot.TopRight,
                        click: addNodeAndLink //defined below

                    },
                    $(go.Shape, "PlusLine", { width: 6, height: 5 })
                ) //end button
            ); //end adornment

        //create new node with link
        function addNodeAndLink(e, obj) {
            var adornment = obj.part;
            var diagram = e.diagram;
            diagram.startTransaction("Add State");


            //get cliked node data
            var fromNode = adornment.adornedPart;
            var fromData = fromNode.data;

            //create new node to the right
            var toData = { text: "add title", comments: "add comment" };
            var p = fromNode.location.copy();
            p.x += 200;
            p.y += 50;
            toData.loc = go.Point.stringify(p); //loc property is a string not a point object
            var model = diagram.model;
            model.addNodeData(toData);

            var linkdata = {
                from: model.getKeyForNodeData(fromData),
                to: model.getKeyForNodeData(toData),
                text: "transition"
            };

            //add link data to model
            model.addLinkData(linkdata);

            //select new node
            var newNode = diagram.findNodeForData(toData);
            diagram.select(newNode);

            diagram.commitTransaction("Add State");
            diagram.scrollToRect(newNode.actualBounds);

        }


        myDiagram.linkTemplate =
            $(go.Link, //link panel
                {
                    curve: go.Link.Bezier, adjusting: go.Link.Stretch,
                    reshapable: true,
                    relinkableFrom: true, relinkableTo: true,
                    toShortLength: 3

                },
                new go.Binding("points").makeTwoWay(),
                new go.Binding("curviness"),
                $(go.Shape, //link shape
                    {
                        strokeWidth: 1.5
                    }
                ),
                $(go.Shape, //link shape
                    { toArrow: "standard", stroke: null }),
                $(go.Panel, "Auto",
                    $(go.Shape, //label background
                        {
                            fill: $(go.Brush, "Radial", { 0: "rgb(255, 240, 240)", 0.3: "rgb(255, 240, 240)", 1: "rgba(255, 240, 240, 0)" }), stroke: null
                        }),
                    $(go.TextBlock, "transition", //label text
                        {
                            textAlign: "center",
                            font: "11pt helvetica, arial, sans-serif",
                            margin: 4,
                            editable: true  // enable in-place editing
                        },
                        new go.Binding("text").makeTwoWay())
                    )
                );
            } else if (diagModel == 1) { //model hierarchiczny
                console.log('displ hiera');

                //init model
                myDiagram =
                    $(go.Diagram, "myDiagramDiv", {

                        initialContentAlignment: go.Spot.Center,
                        maxSelectionCount: 1,
                        validCycle: go.Diagram.CycleDestinationTree,
                        "clickCreatingTool.archetypeNodeData": {},
                        "clickCreatingTool.insertPart": function (loc) {
                            this.archetypeNodeData = {
                                key: getNextKey(),
                                name: "(new person)",
                                title: ""
                            };
                            return go.ClickCreatingTool.prototype.insertPart.call(this, loc);
                        },
                        layout:
                            $(go.TreeLayout, {
                                treeStyle: go.TreeLayout.StyleLastParents,
                                arrangement: go.TreeLayout.ArrangementHorizontal,
                                angle: 90,
                                layerSpacing: 30,
                                //props for last parents
                                alternateAngle: 90,
                                alternateLayerSpacing: 35,
                                alternateAlignment: go.TreeLayout.AlignmentBus,
                                alternateNodeSpacing: 20
                            }),
                        "undoManager.isEnabled": true
                    });

                //enable save button when document is modified
                myDiagram.addDiagramListener("Modified", function (e) {
                    var button = document.getElementById("SaveButton");
                    if (button) button.disabled = !myDiagram.isModified;
                    var idx = document.title.indexOf("*");
                    if (myDiagram.isModified) {
                        if (idx < 0) document.title += "*";
                    } else {
                        if (idx >= 0) document.title = document.title.substr(0, idx);
                    }
                });

                //manage boss
                myDiagram.addDiagramListener("SelectionDeleting", function (e) {
                    var part = e.subject.first(); //e.subject is diagram selection collection, since there's one we get it
                    myDiagram.startTransaction("clear boss");
                    if (part instanceof go.Node) {
                        var it = part.findTreeChildrenNodes();
                        while (it.next()) {
                            var child = it.value;
                            var bossText = child.findObject("boss"); //access textblock by name
                            if (bossText === null) return;
                            bossText.text = "";

                        }
                    } else if (part instanceof go.Link) {
                        var child = part.toNode;
                        var bossText = child.findObect("boss");
                        if (bossText === null) return;
                        bossText.text = "";
                    }
                    myDiagram.commitTransaction("clear boss");

                });

                var levelColors = ["#AC193D", "#2672EC", "#8C0095", "#5133AB",
                       "#008299", "#D24726", "#008A00", "#094AB2"];

                //modify brush depending on tree depth level on layout change
                myDiagram.layout.commitNodes = function () {
                    go.TreeLayout.prototype.commitNodes.call(myDiagram.layout); //standard behavior

                    //go through vertexes and set their fill according to treevertex.level value
                    myDiagram.layout.network.vertexes.each(function (vertex) {
                        if (vertex.node) {
                            var level = vertex.level % (levelColors.length);
                            var color = levelColors[level];
                            var shape = vertex.node.findObject("SHAPE");
                            if (shape) shape.fill = $(go.Brush, "Linear", { 0: color, 1: go.Brush.lightenBy(color, 0.05), start: go.Spot.Left, end: go.Spot.Right });
                        }
                    });
                };

                function getNextKey() {
                    var key = nodeIdCounter;
                    while (myDiagram.model.findNodeDataForKey(key) !== null) {
                        key = nodeIdCounter--;
                    }
                    return key;
                }

                var nodeIdCounter = -1; // use a sequence to guarantee key uniqueness as we add/remove/modify nodes

                // when a node is double-clicked, add a child to it
                function nodeDoubleClick(e, obj) {
                    var clicked = obj.part;
                    if (clicked !== null) {
                        var thisemp = clicked.data;
                        myDiagram.startTransaction("add employee");
                        var newemp = { key: getNextKey(), name: "(new person)", title: "", parent: thisemp.key };




                        myDiagram.model.addNodeData(newemp);
                        myDiagram.commitTransaction("add employee");
                    }
                }

                // this is used to determine feedback during drags
                function mayWorkFor(node1, node2) {
                    if (!(node1 instanceof go.Node)) return false;  // must be a Node
                    if (node1 === node2) return false;  // cannot work for yourself
                    if (node2.isInTreeOf(node1)) return false;  // cannot work for someone who works for you
                    return true;
                }

                // This function provides a common style for most of the TextBlocks.
                // Some of these values may be overridden in a particular TextBlock.
                function textStyle() {
                    return { font: "9pt  Segoe UI,sans-serif", stroke: "white" };
                }

                // This converter is used by the Picture.
                function findHeadShot(key) {
                    if (key < 0 || key > 16) return "images/HSnopic.png"; // There are only 16 images on the server
                    return "images/HS" + key + ".png"
                }

                // define the Node template
                myDiagram.nodeTemplate =
                  $(go.Node, "Auto",
                    { mouseLeave: function (e, node) {

                        //console.log('mousedrop');
                        //console.log(node);
                        saveDiagramState();
                    }},
                    { doubleClick: nodeDoubleClick },
                    { // handle dragging a Node onto a Node to (maybe) change the reporting relationship
                        mouseDragEnter: function (e, node, prev) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();
                            if (!mayWorkFor(selnode, node)) return;
                            var shape = node.findObject("SHAPE");
                            if (shape) {
                                shape._prevFill = shape.fill;  // remember the original brush
                                shape.fill = "darkred";
                            }
                        },
                        mouseDragLeave: function (e, node, next) {
                            var shape = node.findObject("SHAPE");
                            if (shape && shape._prevFill) {
                                shape.fill = shape._prevFill;  // restore the original brush
                            }
                        },
                        mouseDrop: function (e, node) {
                            var diagram = node.diagram;
                            var selnode = diagram.selection.first();  // assume just one Node in selection
                            if (mayWorkFor(selnode, node)) {
                                // find any existing link into the selected node
                                var link = selnode.findTreeParentLink();
                                if (link !== null) {  // reconnect any existing link
                                    link.fromNode = node;
                                } else {  // else create a new link
                                    diagram.toolManager.linkingTool.insertLink(node, node.port, selnode, selnode.port);
                                }
                            }
                        }
                    },
                    // for sorting, have the Node.text be the data.name
                    new go.Binding("text", "name"),
                    // bind the Part.layerName to control the Node's layer depending on whether it isSelected
                    new go.Binding("layerName", "isSelected", function (sel) { return sel ? "Foreground" : ""; }).ofObject(),
                    // define the node's outer shape
                    $(go.Shape, "Rectangle",
                      {
                          name: "SHAPE", fill: "white", stroke: null,
                          // set the port properties:
                          portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer"
                      }),
                    $(go.Panel, "Horizontal",
                      $(go.Picture,
                        {
                            name: "Picture",
                            desiredSize: new go.Size(39, 50),
                            margin: new go.Margin(6, 8, 6, 10),
                        },
                        new go.Binding("source", "key", findHeadShot)),
                      // define the panel where the text will appear
                      $(go.Panel, "Table",
                        {
                            maxSize: new go.Size(150, 999),
                            margin: new go.Margin(6, 10, 0, 3),
                            defaultAlignment: go.Spot.Left
                        },
                        $(go.RowColumnDefinition, { column: 2, width: 4 }),
                        $(go.TextBlock, textStyle(),  // the name
                          {
                              row: 0, column: 0, columnSpan: 5,
                              font: "12pt Segoe UI,sans-serif",
                              editable: true, isMultiline: false,
                              minSize: new go.Size(10, 16)
                          },
                          new go.Binding("text", "name").makeTwoWay()),
                        $(go.TextBlock, "Title: ", textStyle(),
                          { row: 1, column: 0 }),
                        $(go.TextBlock, textStyle(),
                          {
                              row: 1, column: 1, columnSpan: 4,
                              editable: true, isMultiline: false,
                              minSize: new go.Size(10, 14),
                              margin: new go.Margin(0, 0, 0, 3)
                          },
                          new go.Binding("text", "title").makeTwoWay()),
                        $(go.TextBlock, textStyle(),
                          { row: 2, column: 0 },
                          new go.Binding("text", "key", function (v) { return "ID: " + v; })),
                        $(go.TextBlock, textStyle(),
                          { name: "boss", row: 2, column: 3, }, // we include a name so we can access this TextBlock when deleting Nodes/Links
                          new go.Binding("text", "parent", function (v) { return "Boss: " + v; })),
                        $(go.TextBlock, textStyle(),  // the comments
                          {
                              row: 3, column: 0, columnSpan: 5,
                              font: "italic 9pt sans-serif",
                              wrap: go.TextBlock.WrapFit,
                              editable: true,  // by default newlines are allowed
                              minSize: new go.Size(10, 14)
                          },
                          new go.Binding("text", "comments").makeTwoWay())
                      )  // end Table Panel
                    ) // end Horizontal Panel
                  );  // end Node

                // the context menu allows users to make a position vacant,
                // remove a role and reassign the subtree, or remove a department
                myDiagram.nodeTemplate.contextMenu =
                  $(go.Adornment, "Vertical",
                    $("ContextMenuButton",
                      $(go.TextBlock, "Vacate Position"),
                      {
                          click: function (e, obj) {
                              var node = obj.part.adornedPart;
                              if (node !== null) {
                                  var thisemp = node.data;
                                  myDiagram.startTransaction("vacate");
                                  // update the key, name, and comments
                                  myDiagram.model.setKeyForNodeData(thisemp, getNextKey());
                                  myDiagram.model.setDataProperty(thisemp, "name", "(Vacant)");
                                  myDiagram.model.setDataProperty(thisemp, "comments", "");
                                  myDiagram.commitTransaction("vacate");
                              }
                          }
                      }
                    ),
                    $("ContextMenuButton",
                      $(go.TextBlock, "Remove Role"),
                      {
                          click: function (e, obj) {
                              // reparent the subtree to this node's boss, then remove the node
                              var node = obj.part.adornedPart;
                              if (node !== null) {
                                  myDiagram.startTransaction("reparent remove");
                                  var chl = node.findTreeChildrenNodes();
                                  // iterate through the children and set their parent key to our selected node's parent key
                                  while (chl.next()) {
                                      var emp = chl.value;
                                      myDiagram.model.setParentKeyForNodeData(emp.data, node.findTreeParentNode().data.key);
                                  }
                                  // and now remove the selected node itself
                                  myDiagram.model.removeNodeData(node.data);
                                  myDiagram.commitTransaction("reparent remove");
                              }
                          }
                      }
                    ),
                    $("ContextMenuButton",
                      $(go.TextBlock, "Remove Department"),
                      {
                          click: function (e, obj) {
                              // remove the whole subtree, including the node itself
                              var node = obj.part.adornedPart;
                              if (node !== null) {
                                  myDiagram.startTransaction("remove dept");
                                  myDiagram.removeParts(node.findTreeParts());
                                  myDiagram.commitTransaction("remove dept");
                              }
                          }
                      }
                    )
                  );

                // define the Link template
                myDiagram.linkTemplate =
                  $(go.Link, go.Link.Orthogonal,
                    { corner: 5, relinkableFrom: true, relinkableTo: true },
                    $(go.Shape, { strokeWidth: 4, stroke: "#00a4a4" }));  // the link shape



            }
        }



        load();

    }

    function saveDiagramState() {
        //preventDefault();
        document.getElementById("mySavedModel").value = myDiagram.model.toJson();
        document.getElementById("DiagramData").value = myDiagram.model.toJson();
        console.log(myDiagram.model.toJson);


    }
    function load() {
        myDiagram.model = go.Model.fromJson(document.getElementById("DiagramData").value);
    }


    init();

</script>
